/*  MAINTAINER WinJayX <WinJayX@Gmail.com>
 *  LABEL description="This is Java Demo Project"
 *  LABEL version="1.0"
 */
 
 //变量 branch 在参数化构建中添加
 
    //阶段1：拉取代码，node 节点未指定，则在Master执行，因为Git、Maven 环境都在 Master,所以就在主节点执行了
stage('Git Checkout') {
  node('WinBuilder') {
        checkout([$class: 'GitSCM', branches: [[name: '${branch}']], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[credentialsId: '973c9a08-4d62-4f8a-8792-7a214b7ffe66', url: 'http://git.nercoa.com/gk/coursedetectionsystem.git']]])
    }
}

    //阶段2：Dotnet编译代码
stage('Build'){
  node('WinBuilder') {
       echo '编译解决方案'
       bat "$DOTNET publish  -c Release -o \"${WORKSPACE}/publish\" \"src/Nerc.CourseDetectionSystem.Console/Nerc.CourseDetectionSystem.Console.csproj\" "
    }
}

stage('Backup To The Site Directory'){
  node('WinBuilder') {
        dir('publish') {
            bat "zip -r ${BUILD_NUMBER}.zip ./"
        }
    echo '拷贝文件至备份目录'
        bat "xcopy \"publish/${BUILD_NUMBER}.zip\" \"${BACKUP_SHARE_DIR}/${JOB_NAME}/\" /fyi "
        bat "rm -rf publish*"        
   }
}

stage('Download Project Code'){
    node('LinuxDocker_114') {
      echo '建立业务目录'
        //sh "mkdir -p ${JOB_NAME} && cd ${JOB_NAME}"
      echo '下载程序'
        sh "curl -O ${PUBLISH_HOST}/${JOB_NAME}/${BUILD_NUMBER}.zip"
      echo '解压源程序'
      sh "unzip -o ${BUILD_NUMBER}.zip && rm -f ${BUILD_NUMBER}.zip"
    }
}    

    
    //阶段3：构建Docker镜像并推送到私有仓库

stage('Build And Push Image') {
    node('LinuxDocker_114') { 
sh '''
REPOSITORY=harbor.nercoa.com/coursedetection/coursedetectionsystem:${BUILD_NUMBER}
cat > Dockerfile << EOF
#注意选择镜像镜像版
FROM harbor.nercoa.com/courseetection-base:v1.0
MAINTAINER WinJayX <WinJayX@Gmail.com>
LABEL description="This is CourseDetectionSystem Project"
LABEL version="3.0"
USER root

WORKDIR /app

#解决业务无法显示验证码问题。
#RUN apt-get update -y && apt-get upgrade -y
#RUN apt-get install libgdiplus -y && ln -s libgdiplus.so gdiplus.dll
#RUN ln -s /lib/x86_64-linux-gnu/libdl-2.24.so /lib/x86_64-linux-gnu/libdl.s

#安装rar解压工具
RUN apt-get update && apt-get install make
RUN curl -O https://www.rarlab.com/rar/rarlinux-x64-5.9.1.tar.gz && \
tar -xzvf rarlinux-x64-5.9.1.tar.gz && cd rar && make

###安装视频转码组件FFmpeg###
RUN apt-get update -y && apt-get upgrade -y
RUN apt install ffmpeg -y


#将当前目录下的文件，复制到WORKDIR目录,适用于打包整个项目及DockerFile在一个包中的情况。
#如果有创建数据卷则需要运行时src=VolumeName,dst=/app挂载。
COPY . /app/Jobs/CourseDetectionSystem/

#项目变更时，注意修改.dll文件名称
ENTRYPOINT ["dotnet", "Nerc.TaskScheduler.ServiceBus.dll"]

EOF
docker build -t $REPOSITORY .
docker login harbor.nercoa.com -u admin -p Nerc.nerc/1
docker push $REPOSITORY
'''
    }
}

    //阶段4：部署到远程Node Docker主机节点
stage('Deploy To The Test Server') {
    node('LinuxDocker_114') { 
        sh '''
        REPOSITORY=harbor.nercoa.com/coursedetection/coursedetectionsystem:${BUILD_NUMBER}
        docker rm -f CourseDetection || true
        docker container run -d \
        --volume /etc/localtime:/etc/localtime:ro \
        --volume /mnt/docker/003.CourseDetectionSystem/Conf:/app/Config \
        --volume /mnt/docker/003.CourseDetectionSystem/JobConf:/app/Jobs/CourseDetectionSystem/Config \
        --restart always \
        --user root \
        --name CourseDetection \
        --hostname CourseDetection \
        $REPOSITORY
        '''
    }
}

    //阶段5:  获取站 站站点  的 的状态  
//stage('Test the WebSite') {
//    node {
//        sh '''
//        curl -I -m 10 -o /dev/null -s -w %{http_code} 202.205.161.114:8080
//        '''
//    }
//}

    
stage('Deploying To The Production Server'){
  timeout(time: 1, unit: 'DAYS') {
  input message: 'Deploying To The Production Server?', ok: 'Deployment'
  }
}

    //部署到生产环境服务器，||true 短路逻辑运算，只有前面返回假echo $? =1 时，后面才执行
stage('Deploy To The Production Docker Server') {
    node('LinuxPro_APP') { 
        sh '''
        REPOSITORY=harbor.nercoa.com/coursedetection/coursedetectionsystem:${BUILD_NUMBER}
        docker rm -f CourseDetection || true
        docker container run -d \
        --volume /etc/localtime:/etc/localtime:ro \
        --volume /mnt/docker/003.CourseDetectionSystem/Conf:/app/Config \
        --restart always \
        --user root \
        --name CourseDetection \
        --hostname CourseDetection \
        $REPOSITORY
        '''
   }
}